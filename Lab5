Task 1

PS C:\WINDOWS\system32> docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS       NAMES
0d9d9849a3c7   mongo     "docker-entrypoint.s…"   About an hour ago   Up 6 minutes       27017/tcp   mongo-secondary2
b53d00815211   mongo     "docker-entrypoint.s…"   About an hour ago   Up 7 minutes   27017/tcp   mongo-secondary1
adfe6a7facfb   mongo     "docker-entrypoint.s…"   About an hour ago   Up 7 minutes  27017/tcp   mongo-primary

rs0:PRIMARY> rs.status()
{
        "set" : "rs0",
        "date" : ISODate("2021-10-23T16:55:22.928Z"),
        "myState" : 1,
        "term" : NumberLong(1),
        "syncSourceHost" : "",
        "syncSourceId" : -1,
        "heartbeatIntervalMillis" : NumberLong(2000),
        "majorityVoteCount" : 2,
        "writeMajorityCount" : 2,
        "votingMembersCount" : 3,
        "writableVotingMembersCount" : 3,
        "optimes" : {
                "lastCommittedOpTime" : {
                        "ts" : Timestamp(1635008112, 1),
                        "t" : NumberLong(1)
                },
                "lastCommittedWallTime" : ISODate("2021-10-23T16:55:12.993Z"),
                "readConcernMajorityOpTime" : {
                        "ts" : Timestamp(1635008112, 1),
                        "t" : NumberLong(1)
                },
                "appliedOpTime" : {
                        "ts" : Timestamp(1635008112, 1),
                        "t" : NumberLong(1)
                },
                "durableOpTime" : {
                        "ts" : Timestamp(1635008112, 1),
                        "t" : NumberLong(1)
                },
                "lastAppliedWallTime" : ISODate("2021-10-23T16:55:12.993Z"),
                "lastDurableWallTime" : ISODate("2021-10-23T16:55:12.993Z")
        },
        "lastStableRecoveryTimestamp" : Timestamp(1635008082, 3),
        "electionCandidateMetrics" : {
                "lastElectionReason" : "electionTimeout",
                "lastElectionDate" : ISODate("2021-10-23T16:54:42.881Z"),
                "electionTerm" : NumberLong(1),
                "lastCommittedOpTimeAtElection" : {
                        "ts" : Timestamp(0, 0),
                        "t" : NumberLong(-1)
                },
                "lastSeenOpTimeAtElection" : {
                        "ts" : Timestamp(1635008072, 1),
                        "t" : NumberLong(-1)
                },
                "numVotesNeeded" : 2,
                "priorityAtElection" : 1,
                "electionTimeoutMillis" : NumberLong(10000),
                "numCatchUpOps" : NumberLong(0),
                "newTermStartDate" : ISODate("2021-10-23T16:54:42.959Z"),
                "wMajorityWriteAvailabilityDate" : ISODate("2021-10-23T16:54:44.476Z")
        },
        "members" : [
                {
                        "_id" : 0,
                        "name" : "mongo-primary:27017",
                        "health" : 1,
                        "state" : 1,
                        "stateStr" : "PRIMARY",
                        "uptime" : 1457,
                        "optime" : {
                                "ts" : Timestamp(1635008112, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDate" : ISODate("2021-10-23T16:55:12Z"),
                        "syncSourceHost" : "",
                        "syncSourceId" : -1,
                        "infoMessage" : "Could not find member to sync from",
                        "electionTime" : Timestamp(1635008082, 1),
                        "electionDate" : ISODate("2021-10-23T16:54:42Z"),
                        "configVersion" : 1,
                        "configTerm" : 1,
                        "self" : true,
                        "lastHeartbeatMessage" : ""
                },
                {
                        "_id" : 1,
                        "name" : "mongo-secondary1:27017",
                        "health" : 1,
                        "state" : 2,
                        "stateStr" : "SECONDARY",
                        "uptime" : 50,
                        "optime" : {
                                "ts" : Timestamp(1635008112, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDurable" : {
                                "ts" : Timestamp(1635008112, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDate" : ISODate("2021-10-23T16:55:12Z"),
                        "optimeDurableDate" : ISODate("2021-10-23T16:55:12Z"),
                        "lastHeartbeat" : ISODate("2021-10-23T16:55:20.943Z"),
                        "lastHeartbeatRecv" : ISODate("2021-10-23T16:55:22.464Z"),
                        "pingMs" : NumberLong(0),
                        "lastHeartbeatMessage" : "",
                        "syncSourceHost" : "mongo-primary:27017",
                        "syncSourceId" : 0,
                        "infoMessage" : "",
                        "configVersion" : 1,
                        "configTerm" : 1
                },
                {
                        "_id" : 2,
                        "name" : "mongo-secondary2:27017",
                        "health" : 1,
                        "state" : 2,
                        "stateStr" : "SECONDARY",
                        "uptime" : 50,
                        "optime" : {
                                "ts" : Timestamp(1635008112, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDurable" : {
                                "ts" : Timestamp(1635008112, 1),
                                "t" : NumberLong(1)
                        },
                        "optimeDate" : ISODate("2021-10-23T16:55:12Z"),
                        "optimeDurableDate" : ISODate("2021-10-23T16:55:12Z"),
                        "lastHeartbeat" : ISODate("2021-10-23T16:55:20.942Z"),
                        "lastHeartbeatRecv" : ISODate("2021-10-23T16:55:22.476Z"),
                        "pingMs" : NumberLong(0),
                        "lastHeartbeatMessage" : "",
                        "syncSourceHost" : "mongo-primary:27017",
                        "syncSourceId" : 0,
                        "infoMessage" : "",
                        "configVersion" : 1,
                        "configTerm" : 1
                }
        ],
        "ok" : 1,
        "$clusterTime" : {
                "clusterTime" : Timestamp(1635008112, 1),
                "signature" : {
                        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                        "keyId" : NumberLong(0)
                }
        },
        "operationTime" : Timestamp(1635008112, 1)
}

Task 2

rs0:PRIMARY> db.lab5.insert({"category":"Phone", "model":"iPhone 12", "producer":"Apple", "price":600},{writeConcern: {w:0}});
WriteResult({ })
rs0:PRIMARY> db.lab5.insert({"category":"Phone", "model":"Galaxy Fold", "producer":"Samsung", "price":750},{writeConcern: {w:1}});
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.lab5.insert({"category":"Phone", "model":"Redmi Note", "producer":"Xiaomi", "price":300},{writeConcern: {w:1, j:true}});
WriteResult({ "nInserted" : 1 })

Task 3

rs0:SECONDARY> db.lab5.find({model:'iPhone 12'}).readPref('primary').pretty();
Error: error: {
        "topologyVersion" : {
                "processId" : ObjectId("617438d8dbbbc8ea801f88ec"),
                "counter" : NumberLong(4)
        },
        "ok" : 0,
        "errmsg" : "not master and slaveOk=false",
        "code" : 13435,
        "codeName" : "NotPrimaryNoSecondaryOk",
        "$clusterTime" : {
                "clusterTime" : Timestamp(1635009981, 1),
                "signature" : {
                        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                        "keyId" : NumberLong(0)
                }
        },
        "operationTime" : Timestamp(1635009981, 1)
}
rs0:SECONDARY> db.lab5.find({model:'iPhone 12'}).readPref('secondary').pretty();
{
        "_id" : ObjectId("61744463271659f17024d3e0"),
        "category" : "Phone",
        "model" : "iPhone 12",
        "producer" : "Apple",
        "price" : 600
}

rs0:PRIMARY> db.lab5.find({model:'iPhone 12'}).readPref('primary').pretty();
{
        "_id" : ObjectId("61744463271659f17024d3e0"),
        "category" : "Phone",
        "model" : "iPhone 12",
        "producer" : "Apple",
        "price" : 600
}

rs0:PRIMARY> db.lab5.find({model:'iPhone 12'}).readPref('secondary').pretty();
{
        "_id" : ObjectId("61744463271659f17024d3e0"),
        "category" : "Phone",
        "model" : "iPhone 12",
        "producer" : "Apple",
        "price" : 600
}

Task 4

rs0:PRIMARY> db.lab5.insert({"category":"Smart Watch", "model":"Series 6", "producer":"Apple", "color":"blue", "price":350},{writeConcern: {w:3}});
WriteResult({ "nInserted" : 1 })

The object inserted just after the third node was powered up.

Task 5

rs0:PRIMARY> db.lab5.insert({"category":"Smart Watch", "model":"Series 6", "producer":"Apple", "color":"blue", "price":350},{writeConcern: {w:3, wtimeout:10}});
WriteResult({
        "nInserted" : 1,
        "writeConcernError" : {
                "code" : 64,
                "codeName" : "WriteConcernFailed",
                "errmsg" : "waiting for replication timed out",
                "errInfo" : {
                        "wtimeout" : true,
                        "writeConcern" : {
                                "w" : 3,
                                "wtimeout" : 10,
                                "provenance" : "clientSupplied"
                        }
                }
        }
})

Task 6

PS C:\WINDOWS\system32> docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS       NAMES
0d9d9849a3c7   mongo     "docker-entrypoint.s…"   About an hour ago   Up 4 minutes       27017/tcp   mongo-secondary2
b53d00815211   mongo     "docker-entrypoint.s…"   About an hour ago   Up About an hour   27017/tcp   mongo-secondary1
PS C:\WINDOWS\system32> docker exec -it mongo-secondary1 mongo
MongoDB shell version v5.0.2
connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("c3225277-8e69-4aa9-b016-4de41b9f9fa6") }
MongoDB server version: 5.0.2
================
Warning: the "mongo" shell has been superseded by "mongosh",
which delivers improved usability and compatibility.The "mongo" shell has been deprecated and will be removed in
an upcoming release.
We recommend you begin using "mongosh".
For installation instructions, see
https://docs.mongodb.com/mongodb-shell/install/
================
---
The server generated these startup warnings when booting:
        2021-10-23T16:31:20.571+00:00: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine. See http://dochub.mongodb.org/core/prodnotes-filesystem
        2021-10-23T16:31:21.416+00:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
        2021-10-23T16:31:21.416+00:00: /sys/kernel/mm/transparent_hugepage/enabled is 'always'. We suggest setting it to 'never'
---
---
        Enable MongoDB's free cloud-based monitoring service, which will then receive and display
        metrics about your deployment (disk utilization, CPU, operation statistics, etc).

        The monitoring data will be available on a MongoDB website with a unique URL accessible to you
        and anyone you share the URL with. MongoDB may use this information to make product
        improvements and to suggest MongoDB products and deployment options to you.

        To enable free monitoring, run the following command: db.enableFreeMonitoring()
        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()
---
rs0:PRIMARY> db.lab5.insert({"category":"Smart Watch", "model":"Galaxy Watch", "producer":"Samsung", "color":"grey", "price":350},{writeConcern:{w:"majority"}});
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.lab5.insert({"category":"Smart Watch", "model":"Fit", "producer":"Huawei", "color":"pink", "price":250},{writeConcern:{w:"majority"}});
WriteResult({ "nInserted" : 1 })

PS C:\WINDOWS\system32> docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS       NAMES
0d9d9849a3c7   mongo     "docker-entrypoint.s…"   About an hour ago   Up 12 minutes      27017/tcp   mongo-secondary2
b53d00815211   mongo     "docker-entrypoint.s…"   About an hour ago   Up About an hour   27017/tcp   mongo-secondary1
adfe6a7facfb   mongo     "docker-entrypoint.s…"   About an hour ago   Up 7 seconds       27017/tcp   mongo-primary

rs0:SECONDARY> db.lab5.find().pretty();
{
        "_id" : ObjectId("61744463271659f17024d3e0"),
        "category" : "Phone",
        "model" : "iPhone 12",
        "producer" : "Apple",
        "price" : 600
}
{
        "_id" : ObjectId("6174448b271659f17024d3e1"),
        "category" : "Phone",
        "model" : "Galaxy Fold",
        "producer" : "Samsung",
        "price" : 750
}
{
        "_id" : ObjectId("617444d6271659f17024d3e2"),
        "category" : "Phone",
        "model" : "Redmi Note",
        "producer" : "Xiaomi",
        "price" : 300
}
{
        "_id" : ObjectId("617447ca271659f17024d3e4"),
        "category" : "Smart Watch",
        "model" : "Series 6",
        "producer" : "Apple",
        "color" : "blue",
        "price" : 350
}
{
        "_id" : ObjectId("61744a57f27671f8410db170"),
        "category" : "Smart Watch",
        "model" : "Galaxy Watch",
        "producer" : "Samsung",
        "color" : "grey",
        "price" : 350
}
{
        "_id" : ObjectId("61744a8ff27671f8410db171"),
        "category" : "Smart Watch",
        "model" : "Fit",
        "producer" : "Huawei",
        "color" : "pink",
        "price" : 250
}

Task 7

rs0:PRIMARY> db.lab5.insert({"category":"TV", "model":"ThinQ", "producer":"LG", "diagonal":55, "price":400},{writeConcern: {w:1}});
WriteResult({ "nInserted" : 1 })

Since all secondary nodes are powered off, primary node is re-elected as secondary.

rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('majority').pretty();
rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('local').pretty();
{
        "_id" : ObjectId("61745418c2927f8fc8f70c0c"),
        "category" : "TV",
        "model" : "ThinQ",
        "producer" : "LG",
        "diagonal" : 55,
        "price" : 400
}
rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('linearizable').pretty();
Error: error: {
        "topologyVersion" : {
                "processId" : ObjectId("61744aca7035d44f9b952c0f"),
                "counter" : NumberLong(11)
        },
        "ok" : 0,
        "errmsg" : "cannot satisfy linearizable read concern on non-primary node",
        "code" : 10107,
        "codeName" : "NotWritablePrimary",
        "$clusterTime" : {
                "clusterTime" : Timestamp(1635013656, 1),
                "signature" : {
                        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                        "keyId" : NumberLong(0)
                }
        },
        "operationTime" : Timestamp(1635013656, 1)
}

rs0:PRIMARY> db.lab5.find({"model":"ThinQ"}).pretty();

No matches were found for this query. Seems, the inserted object was dropped.

Task 8

rs0:PRIMARY> cfg.members[0].priority = 0
0
rs0:PRIMARY> cfg.members[0].hidden = true
True
rs0:PRIMARY> cfg.members[0].secondaryDelaySecs = 60
60
rs0:PRIMARY> rs.reconfig(cfg)
{
        "ok" : 1,
        "$clusterTime" : {
                "clusterTime" : Timestamp(1635017331, 1),
                "signature" : {
                        "hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
                        "keyId" : NumberLong(0)
                }
        },
        "operationTime" : Timestamp(1635017314, 1)
}
rs0:PRIMARY> db.lab5.insert({"category":"TV", "model":"ThinQ", "producer":"LG", "diagonal":55, "price":400});
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.lab5.find({"model":"ThinQ"}).pretty();
{
        "_id" : ObjectId("61745e8709655ba06ae549c8"),
        "category" : "TV",
        "model" : "ThinQ",
        "producer" : "LG",
        "diagonal" : 55,
        "price" : 400
}

rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('local').pretty();
rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('local').pretty();
rs0:SECONDARY> db.lab5.find({"model":"ThinQ"}).readPref('secondary').readConcern('local').pretty();
{
        "_id" : ObjectId("61745e8709655ba06ae549c8"),
        "category" : "TV",
        "model" : "ThinQ",
        "producer" : "LG",
        "diagonal" : 55,
        "price" : 400
}

Task 9

rs0:PRIMARY> db.lab5.insert({"category":"TV", "model":"ThinQ", "producer":"LG", "diagonal":55, "price":400});
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.lab5.insert ({"category":"TV", "model":"MotionFlow", "producer":"Sony", "diagonal":50, "price":450});
WriteResult({ "nInserted" : 1 })
rs0:PRIMARY> db.lab5.find({"category":"TV"}). readConcern('linearizable').pretty();
{
        "_id" : ObjectId("6174678bb3cd979fb31db5f3"),
        "category" : "TV",
        "model" : "ThinQ",
        "producer" : "LG",
        "diagonal" : 55,
        "price" : 400
}
{
        "_id" : ObjectId("617462ee384e6c3246fef02a"),
        "category" : "TV",
        "model" : " MotionFlow ",
        "producer" : " Sony ",
        "diagonal" : 50,
        "price" : 450
}

The resuits were presented with a delay.
